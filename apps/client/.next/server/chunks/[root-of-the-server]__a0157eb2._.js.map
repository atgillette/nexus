{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///Users/adriangillette/Documents/consulting/Braintrust/nexus/apps/client/app/api/dashboard/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport async function GET() {\n  try {\n    // For now, we'll use the first client company's data\n    // In a real app, this would be based on the authenticated user\n    const clientCompany = await prisma.company.findFirst({\n      include: {\n        workflows: {\n          include: {\n            executions: {\n              orderBy: { createdAt: 'desc' },\n              take: 30 // Last 30 executions for ROI calc\n            }\n          }\n        },\n        users: true,\n        billingUsage: true\n      }\n    });\n\n    if (!clientCompany) {\n      return NextResponse.json({ error: \"No client company found\" }, { status: 404 });\n    }\n\n    // Calculate ROI metrics\n    const totalExecutions = clientCompany.workflows.reduce(\n      (sum, workflow) => sum + workflow.executions.length, 0\n    );\n    \n    const successfulExecutions = clientCompany.workflows.reduce(\n      (sum, workflow) => sum + workflow.executions.filter(e => e.success).length, 0\n    );\n\n    const successRate = totalExecutions > 0 ? Math.round((successfulExecutions / totalExecutions) * 100) : 0;\n    \n    // Mock ROI calculation: successful executions save $50 each on average\n    const estimatedSavings = successfulExecutions * 50;\n    \n    // Get recent workflow executions with details\n    const recentExecutions = clientCompany.workflows\n      .flatMap(workflow => \n        workflow.executions.map(execution => ({\n          workflowName: workflow.name,\n          success: execution.success,\n          timestamp: execution.createdAt,\n          executionTime: execution.executionTime || 0\n        }))\n      )\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, 10);\n\n    // Get billing info\n    const currentBilling = clientCompany.billingUsage[0] || {\n      monthlyUsage: 0,\n      monthlyLimit: 1000,\n      costPerExecution: 2.50\n    };\n\n    return NextResponse.json({\n      company: {\n        name: clientCompany.name,\n        id: clientCompany.id\n      },\n      metrics: {\n        activeWorkflows: clientCompany.workflows.filter(w => w.status === 'active').length,\n        totalExecutions,\n        successRate,\n        estimatedSavings,\n        averageExecutionTime: recentExecutions.length > 0 \n          ? Math.round(recentExecutions.reduce((sum, e) => sum + e.executionTime, 0) / recentExecutions.length)\n          : 0\n      },\n      billing: {\n        monthlyUsage: currentBilling.monthlyUsage,\n        monthlyLimit: currentBilling.monthlyLimit,\n        costPerExecution: currentBilling.costPerExecution,\n        currentCost: currentBilling.monthlyUsage * currentBilling.costPerExecution\n      },\n      recentExecutions,\n      workflows: clientCompany.workflows.map(workflow => ({\n        id: workflow.id,\n        name: workflow.name,\n        status: workflow.status,\n        executionCount: workflow.executions.length,\n        lastExecution: workflow.executions[0]?.createdAt || null\n      }))\n    });\n    \n  } catch (error) {\n    console.error(\"Client dashboard API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch dashboard data\" },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe;IACpB,IAAI;QACF,qDAAqD;QACrD,+DAA+D;QAC/D,MAAM,gBAAgB,MAAM,OAAO,OAAO,CAAC,SAAS,CAAC;YACnD,SAAS;gBACP,WAAW;oBACT,SAAS;wBACP,YAAY;4BACV,SAAS;gCAAE,WAAW;4BAAO;4BAC7B,MAAM,GAAG,kCAAkC;wBAC7C;oBACF;gBACF;gBACA,OAAO;gBACP,cAAc;YAChB;QACF;QAEA,IAAI,CAAC,eAAe;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,wBAAwB;QACxB,MAAM,kBAAkB,cAAc,SAAS,CAAC,MAAM,CACpD,CAAC,KAAK,WAAa,MAAM,SAAS,UAAU,CAAC,MAAM,EAAE;QAGvD,MAAM,uBAAuB,cAAc,SAAS,CAAC,MAAM,CACzD,CAAC,KAAK,WAAa,MAAM,SAAS,UAAU,CAAC,MAAM,CAAC,CAAA,IAAK,EAAE,OAAO,EAAE,MAAM,EAAE;QAG9E,MAAM,cAAc,kBAAkB,IAAI,KAAK,KAAK,CAAC,AAAC,uBAAuB,kBAAmB,OAAO;QAEvG,uEAAuE;QACvE,MAAM,mBAAmB,uBAAuB;QAEhD,8CAA8C;QAC9C,MAAM,mBAAmB,cAAc,SAAS,CAC7C,OAAO,CAAC,CAAA,WACP,SAAS,UAAU,CAAC,GAAG,CAAC,CAAA,YAAa,CAAC;oBACpC,cAAc,SAAS,IAAI;oBAC3B,SAAS,UAAU,OAAO;oBAC1B,WAAW,UAAU,SAAS;oBAC9B,eAAe,UAAU,aAAa,IAAI;gBAC5C,CAAC,IAEF,IAAI,CAAC,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,IAC9E,KAAK,CAAC,GAAG;QAEZ,mBAAmB;QACnB,MAAM,iBAAiB,cAAc,YAAY,CAAC,EAAE,IAAI;YACtD,cAAc;YACd,cAAc;YACd,kBAAkB;QACpB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;gBACP,MAAM,cAAc,IAAI;gBACxB,IAAI,cAAc,EAAE;YACtB;YACA,SAAS;gBACP,iBAAiB,cAAc,SAAS,CAAC,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,UAAU,MAAM;gBAClF;gBACA;gBACA;gBACA,sBAAsB,iBAAiB,MAAM,GAAG,IAC5C,KAAK,KAAK,CAAC,iBAAiB,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,aAAa,EAAE,KAAK,iBAAiB,MAAM,IAClG;YACN;YACA,SAAS;gBACP,cAAc,eAAe,YAAY;gBACzC,cAAc,eAAe,YAAY;gBACzC,kBAAkB,eAAe,gBAAgB;gBACjD,aAAa,eAAe,YAAY,GAAG,eAAe,gBAAgB;YAC5E;YACA;YACA,WAAW,cAAc,SAAS,CAAC,GAAG,CAAC,CAAA,WAAY,CAAC;oBAClD,IAAI,SAAS,EAAE;oBACf,MAAM,SAAS,IAAI;oBACnB,QAAQ,SAAS,MAAM;oBACvB,gBAAgB,SAAS,UAAU,CAAC,MAAM;oBAC1C,eAAe,SAAS,UAAU,CAAC,EAAE,EAAE,aAAa;gBACtD,CAAC;QACH;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiC,GAC1C;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF","debugId":null}}]
}