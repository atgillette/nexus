generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model User {
  id               String                   @id @default(cuid())
  email            String                   @unique
  firstName        String
  lastName         String
  role             UserRole
  avatarUrl        String?
  phone            String?
  costRate         Float?
  billRate         Float?
  companyId        String?
  isActive         Boolean                  @default(true)
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  notifications    Notification[]
  company          Company?                 @relation(fields: [companyId], references: [id])
  companyAssignments UserCompanyAssignment[]

  @@map("users")
}

model Company {
  id           String                   @id @default(cuid())
  name         String
  domain       String                   @unique
  industry     String?
  isActive     Boolean                  @default(true)
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  billingUsage BillingUsage[]
  credentials  Credential[]
  users        User[]
  workflows    Workflow[]
  userAssignments UserCompanyAssignment[]

  @@map("companies")
}

model UserCompanyAssignment {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("user_company_assignments")
}

model Workflow {
  id          String              @id @default(cuid())
  name        String
  description String?
  companyId   String
  isActive    Boolean             @default(true)
  config      Json                @default("{}")
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  executions  WorkflowExecution[]
  company     Company             @relation(fields: [companyId], references: [id])

  @@map("workflows")
}

model WorkflowExecution {
  id             String          @id @default(cuid())
  workflowId     String
  status         ExecutionStatus @default(pending)
  startedAt      DateTime        @default(now())
  completedAt    DateTime?
  duration       Int?
  result         Json?
  error          String?
  itemsProcessed Int             @default(0)
  timeSaved      Int             @default(0)
  costSavings    Float           @default(0)
  workflow       Workflow        @relation(fields: [workflowId], references: [id])

  @@map("workflow_executions")
}

model Credential {
  id        String   @id @default(cuid())
  name      String
  type      String
  companyId String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])

  @@map("credentials")
}

model BillingUsage {
  id             String   @id @default(cuid())
  companyId      String
  month          Int
  year           Int
  executionCount Int      @default(0)
  totalTimeSaved Int      @default(0)
  totalCostSaved Float    @default(0)
  billingAmount  Float    @default(0)
  isPaid         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  company        Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, month, year])
  @@map("billing_usage")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(info)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum UserRole {
  admin
  se
  client
}

enum ExecutionStatus {
  pending
  running
  completed
  failed
}

enum NotificationType {
  info
  success
  warning
  error
}
