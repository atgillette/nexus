{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///Users/adriangillette/Documents/consulting/Braintrust/nexus/apps/admin/app/api/dashboard/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport async function GET() {\n  try {\n    // Get dashboard metrics\n    const [\n      totalUsers,\n      activeWorkflows,\n      totalExecutions,\n      recentUsers,\n      recentExecutions,\n    ] = await Promise.all([\n      // Total users count\n      prisma.user.count(),\n      \n      // Active workflows count  \n      prisma.workflow.count({\n        where: { status: \"active\" }\n      }),\n      \n      // Total executions with success rate\n      prisma.workflowExecution.aggregate({\n        _count: { id: true },\n        _avg: { success: true }\n      }),\n      \n      // Recent user registrations (last 5)\n      prisma.user.findMany({\n        take: 5,\n        orderBy: { createdAt: 'desc' },\n        include: { company: true }\n      }),\n      \n      // Recent workflow executions (last 10)\n      prisma.workflowExecution.findMany({\n        take: 10,\n        orderBy: { createdAt: 'desc' },\n        include: { \n          workflow: { include: { company: true } }\n        }\n      })\n    ]);\n\n    // Calculate success rate\n    const successRate = Math.round((totalExecutions._avg.success || 0) * 100);\n    \n    // Calculate revenue (mock calculation based on executions)\n    const monthlyRevenue = totalExecutions._count.id * 12.50; // $12.50 per execution average\n    \n    return NextResponse.json({\n      metrics: {\n        totalUsers,\n        activeWorkflows,\n        totalExecutions: totalExecutions._count.id,\n        successRate,\n        monthlyRevenue,\n      },\n      recentActivity: recentUsers.map(user => ({\n        type: 'user_registered',\n        user: `${user.firstName} ${user.lastName}`,\n        email: user.email,\n        company: user.company.name,\n        timestamp: user.createdAt\n      })),\n      recentExecutions: recentExecutions.map(execution => ({\n        type: execution.success ? 'execution_success' : 'execution_failed',\n        workflow: execution.workflow.name,\n        company: execution.workflow.company.name,\n        timestamp: execution.createdAt,\n        success: execution.success\n      }))\n    });\n    \n  } catch (error) {\n    console.error(\"Dashboard API error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch dashboard data\" },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe;IACpB,IAAI;QACF,wBAAwB;QACxB,MAAM,CACJ,YACA,iBACA,iBACA,aACA,iBACD,GAAG,MAAM,QAAQ,GAAG,CAAC;YACpB,oBAAoB;YACpB,OAAO,IAAI,CAAC,KAAK;YAEjB,2BAA2B;YAC3B,OAAO,QAAQ,CAAC,KAAK,CAAC;gBACpB,OAAO;oBAAE,QAAQ;gBAAS;YAC5B;YAEA,qCAAqC;YACrC,OAAO,iBAAiB,CAAC,SAAS,CAAC;gBACjC,QAAQ;oBAAE,IAAI;gBAAK;gBACnB,MAAM;oBAAE,SAAS;gBAAK;YACxB;YAEA,qCAAqC;YACrC,OAAO,IAAI,CAAC,QAAQ,CAAC;gBACnB,MAAM;gBACN,SAAS;oBAAE,WAAW;gBAAO;gBAC7B,SAAS;oBAAE,SAAS;gBAAK;YAC3B;YAEA,uCAAuC;YACvC,OAAO,iBAAiB,CAAC,QAAQ,CAAC;gBAChC,MAAM;gBACN,SAAS;oBAAE,WAAW;gBAAO;gBAC7B,SAAS;oBACP,UAAU;wBAAE,SAAS;4BAAE,SAAS;wBAAK;oBAAE;gBACzC;YACF;SACD;QAED,yBAAyB;QACzB,MAAM,cAAc,KAAK,KAAK,CAAC,CAAC,gBAAgB,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI;QAErE,2DAA2D;QAC3D,MAAM,iBAAiB,gBAAgB,MAAM,CAAC,EAAE,GAAG,OAAO,+BAA+B;QAEzF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;gBACP;gBACA;gBACA,iBAAiB,gBAAgB,MAAM,CAAC,EAAE;gBAC1C;gBACA;YACF;YACA,gBAAgB,YAAY,GAAG,CAAC,CAAA,OAAQ,CAAC;oBACvC,MAAM;oBACN,MAAM,GAAG,KAAK,SAAS,CAAC,CAAC,EAAE,KAAK,QAAQ,EAAE;oBAC1C,OAAO,KAAK,KAAK;oBACjB,SAAS,KAAK,OAAO,CAAC,IAAI;oBAC1B,WAAW,KAAK,SAAS;gBAC3B,CAAC;YACD,kBAAkB,iBAAiB,GAAG,CAAC,CAAA,YAAa,CAAC;oBACnD,MAAM,UAAU,OAAO,GAAG,sBAAsB;oBAChD,UAAU,UAAU,QAAQ,CAAC,IAAI;oBACjC,SAAS,UAAU,QAAQ,CAAC,OAAO,CAAC,IAAI;oBACxC,WAAW,UAAU,SAAS;oBAC9B,SAAS,UAAU,OAAO;gBAC5B,CAAC;QACH;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiC,GAC1C;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF","debugId":null}}]
}