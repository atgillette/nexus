{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///Users/adriangillette/Documents/consulting/Braintrust/nexus/apps/client/app/api/test-db/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport async function GET() {\n  try {\n    // Test database connection by counting records\n    const stats = {\n      users: await prisma.user.count(),\n      companies: await prisma.company.count(),\n      workflows: await prisma.workflow.count(),\n      executions: await prisma.workflowExecution.count(),\n    };\n    \n    return NextResponse.json({\n      success: true,\n      message: \"Database connection successful!\",\n      stats,\n    });\n  } catch (error) {\n    console.error(\"Database connection error:\", error);\n    return NextResponse.json(\n      { \n        success: false, \n        error: \"Database connection failed\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe;IACpB,IAAI;QACF,+CAA+C;QAC/C,MAAM,QAAQ;YACZ,OAAO,MAAM,OAAO,IAAI,CAAC,KAAK;YAC9B,WAAW,MAAM,OAAO,OAAO,CAAC,KAAK;YACrC,WAAW,MAAM,OAAO,QAAQ,CAAC,KAAK;YACtC,YAAY,MAAM,OAAO,iBAAiB,CAAC,KAAK;QAClD;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF","debugId":null}}]
}